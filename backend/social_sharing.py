import os
from typing import Dict, Any, Optional
import json
from datetime import datetime

# Try to import social media libraries, handle gracefully if not available
try:
    import tweepy
    TWEEPY_AVAILABLE = True
except ImportError:
    TWEEPY_AVAILABLE = False
    tweepy = None

try:
    import facebook
    FACEBOOK_AVAILABLE = True
except ImportError:
    FACEBOOK_AVAILABLE = False
    facebook = None

try:
    import linkedin_api
    LINKEDIN_AVAILABLE = True
except ImportError:
    LINKEDIN_AVAILABLE = False
    linkedin_api = None

class SocialMediaManager:
    def __init__(self):
        # Twitter API credentials
        self.twitter_api_key = os.getenv('TWITTER_API_KEY', '')
        self.twitter_api_secret = os.getenv('TWITTER_API_SECRET', '')
        self.twitter_access_token = os.getenv('TWITTER_ACCESS_TOKEN', '')
        self.twitter_access_secret = os.getenv('TWITTER_ACCESS_SECRET', '')

        # Facebook API credentials
        self.facebook_app_id = os.getenv('FACEBOOK_APP_ID', '')
        self.facebook_app_secret = os.getenv('FACEBOOK_APP_SECRET', '')
        self.facebook_access_token = os.getenv('FACEBOOK_ACCESS_TOKEN', '')

        # LinkedIn API credentials
        self.linkedin_username = os.getenv('LINKEDIN_USERNAME', '')
        self.linkedin_password = os.getenv('LINKEDIN_PASSWORD', '')

        # Initialize clients
        self.twitter_client = None
        self.facebook_client = None
        self.linkedin_client = None

        self._initialize_clients()

    def _initialize_clients(self):
        """Initialize social media API clients"""
        try:
            if TWEEPY_AVAILABLE and all([self.twitter_api_key, self.twitter_api_secret,
                                       self.twitter_access_token, self.twitter_access_secret]):
                auth = tweepy.OAuth1UserHandler(
                    self.twitter_api_key, self.twitter_api_secret,
                    self.twitter_access_token, self.twitter_access_secret
                )
                self.twitter_client = tweepy.API(auth)
        except Exception as e:
            print(f"Twitter initialization failed: {e}")

        try:
            if FACEBOOK_AVAILABLE and self.facebook_access_token:
                self.facebook_client = facebook.GraphAPI(self.facebook_access_token)
        except Exception as e:
            print(f"Facebook initialization failed: {e}")

        try:
            if LINKEDIN_AVAILABLE and all([self.linkedin_username, self.linkedin_password]):
                self.linkedin_client = linkedin_api.Linkedin(self.linkedin_username, self.linkedin_password)
        except Exception as e:
            print(f"LinkedIn initialization failed: {e}")

    def generate_social_content(self, summary_data: Dict[str, Any]) -> Dict[str, str]:
        """Generate engaging social media content from video summary"""
        video_title = summary_data.get('video_info', {}).get('title', 'Amazing Video')
        key_topics = summary_data.get('analysis', {}).get('topics', [])[:3]
        sentiment = summary_data.get('analysis', {}).get('sentiment', 'neutral')

        # Twitter content (280 characters max)
        twitter_content = f"ðŸ“¹ Just summarized: {video_title[:100]}...\n\n"
        if key_topics:
            twitter_content += f"ðŸ”‘ Key topics: {', '.join(key_topics)}\n"
        twitter_content += f"ðŸ“Š Sentiment: {sentiment.title()}\n\n"
        twitter_content += f"#YouTube #AISummary #VideoAnalysis\n"
        twitter_content += f"ðŸ”— Summarized with AI magic! âœ¨"

        # LinkedIn content (more professional)
        linkedin_content = f"ðŸ“ˆ Video Analysis Summary\n\n"
        linkedin_content += f"Title: {video_title}\n\n"
        linkedin_content += f"ðŸŽ¯ Key Insights:\n"
        for i, topic in enumerate(key_topics[:3], 1):
            linkedin_content += f"{i}. {topic}\n"
        linkedin_content += f"\nðŸ“Š Overall Sentiment: {sentiment.title()}\n\n"
        linkedin_content += f"#DataScience #AI #ContentAnalysis #YouTubeAnalytics"

        # Facebook content (engaging and visual)
        facebook_content = f"ðŸŽ¬ AI-Powered Video Summary!\n\n"
        facebook_content += f"ðŸ“¹ {video_title}\n\n"
        facebook_content += f"âœ¨ What I learned:\n"
        for topic in key_topics[:2]:
            facebook_content += f"â€¢ {topic}\n"
        facebook_content += f"\nðŸ’­ The content feels {sentiment}\n\n"
        facebook_content += f"ðŸ¤– Generated by advanced AI analysis! #Tech #Innovation"

        return {
            'twitter': twitter_content[:280],
            'linkedin': linkedin_content,
            'facebook': facebook_content
        }

    def share_to_twitter(self, content: str, video_url: Optional[str] = None) -> Dict[str, Any]:
        """Share content to Twitter"""
        if not self.twitter_client:
            return {"error": "Twitter client not initialized"}

        try:
            tweet_text = content
            if video_url:
                tweet_text += f"\n\n{video_url}"

            tweet = self.twitter_client.update_status(tweet_text)
            return {
                "success": True,
                "platform": "twitter",
                "tweet_id": tweet.id,
                "url": f"https://twitter.com/user/status/{tweet.id}"
            }
        except Exception as e:
            return {"error": str(e)}

    def share_to_facebook(self, content: str, video_url: Optional[str] = None) -> Dict[str, Any]:
        """Share content to Facebook"""
        if not self.facebook_client:
            return {"error": "Facebook client not initialized"}

        try:
            post_content = content
            if video_url:
                post_content += f"\n\n{video_url}"

            post = self.facebook_client.put_object("me", "feed", message=post_content)
            return {
                "success": True,
                "platform": "facebook",
                "post_id": post['id'],
                "url": f"https://facebook.com/{post['id']}"
            }
        except Exception as e:
            return {"error": str(e)}

    def share_to_linkedin(self, content: str, video_url: Optional[str] = None) -> Dict[str, Any]:
        """Share content to LinkedIn"""
        if not self.linkedin_client:
            return {"error": "LinkedIn client not initialized"}

        try:
            post_content = content
            if video_url:
                post_content += f"\n\n{video_url}"

            # LinkedIn API sharing
            self.linkedin_client.submit_share(post_content)
            return {
                "success": True,
                "platform": "linkedin",
                "message": "Posted successfully"
            }
        except Exception as e:
            return {"error": str(e)}

    def share_to_all_platforms(self, summary_data: Dict[str, Any]) -> Dict[str, Any]:
        """Share summary to all configured social media platforms"""
        video_url = summary_data.get('video_info', {}).get('url', '')
        social_content = self.generate_social_content(summary_data)

        results = {}

        # Share to each platform
        if self.twitter_client:
            results['twitter'] = self.share_to_twitter(social_content['twitter'], video_url)

        if self.facebook_client:
            results['facebook'] = self.share_to_facebook(social_content['facebook'], video_url)

        if self.linkedin_client:
            results['linkedin'] = self.share_to_linkedin(social_content['linkedin'], video_url)

        return {
            "shared_content": social_content,
            "sharing_results": results,
            "platforms_shared": len([r for r in results.values() if "error" not in r]),
            "timestamp": datetime.now().isoformat()
        }
